buildscript {
    repositories {
        google()
        mavenCentral()
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath libs.gradle
    }
}

plugins {
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    alias(libs.plugins.kotlin.android) apply false
}

ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID') ?: ''
ext["signing.password"] = System.getenv('SIGNING_KEY_PASSWORD') ?: ''
ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_KEY_FILE') ?: ''

version = '4.1.1-SNAPSHOT'
group = "com.braintreepayments"

ext {
    compileSdkVersion = 35
    minSdkVersion = 23
    targetSdkVersion = 35
    versionCode = 16
    versionName = version
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv('SONATYPE_USERNAME')
            password = System.getenv('SONATYPE_PASSWORD')
        }
    }
    transitionCheckOptions {
        // give nexus sonatype more time to close the staging repository
        delayBetween.set(Duration.ofSeconds(20))
    }
}

task changeGradleReleaseVersion {
    doLast {
        def gradleFile = new File('build.gradle')
        def gradleFileText = gradleFile.text.replaceFirst("\\nversion = '\\d+\\.\\d+\\.\\d+(-.*)?'", "\nversion = '" + versionParam + "'")
        gradleFile.write(gradleFileText)
    }
}

task changeREADMEVersion {
    doLast {

        def readmeFile = new File('README.md')
        def readmeFileText = readmeFile.text.replaceFirst(":popup-bridge:\\d+\\.\\d+\\.\\d+'", ":popup-bridge:" + versionParam + "'")
        readmeFile.write(readmeFileText)
    }
}

task changeMigrationGuideVersion {
    doLast {
        def migrationGuideFile = new File('v5_MIGRATION.md')
        def migrationGuideFileText = migrationGuideFile.text.replaceAll(":\\d+\\.\\d+\\.\\d+(-.*)?'", ":" + versionParam + "'")
        migrationGuideFile.write(migrationGuideFileText)
    }
}

task updateCHANGELOGVersion {
    doLast {
        def changelogFile = new File('CHANGELOG.md')
        def changelogFileText = changelogFile.text.replaceFirst("## unreleased", "## " + versionParam)
        changelogFile.write(changelogFileText)
    }
}

task incrementSNAPSHOTVersion {
    doLast {
        def gradleFile = new File('build.gradle')
        def (major, minor, patch) = versionParam.tokenize('.')
        def patchInteger = patch.toInteger()
        def newVersion = "$major.$minor.${patchInteger + 1}-SNAPSHOT"
        def gradleFileText = gradleFile.text.replaceFirst("\\nversion = '\\d+\\.\\d+\\.\\d+(-.*)?'", "\nversion = '" + newVersion + "'")
        gradleFile.write(gradleFileText)

        // update README snapshot version
        def readmeFile = new File('README.md')
        def readmeFileText = readmeFile.text.replaceFirst(":popup-bridge:\\d+\\.\\d+\\.\\d+-SNAPSHOT'", ":popup-bridge:" + newVersion + "'")
        readmeFile.write(readmeFileText)
    }
}

task incrementVersionCode {
    doLast {
        def gradleFile = new File('build.gradle')
        def versionText = gradleFile.text.find("versionCode = \\d+")
        def params = versionText.split("=")
        def newVersionCode = params[1].trim().toInteger() + 1
        def gradleFileText = gradleFile.text.replaceFirst("versionCode = \\d+", "versionCode = " + newVersionCode)
        gradleFile.write(gradleFileText)
    }
}

